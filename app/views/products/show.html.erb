<div class="col-lg-8 col-lg-offset-2">
	<h2> <%= @product.title %> </h2>

	<p class="date">Submitted <%= time_ago_in_words(@product.created_at) %> ago</p> 

	<p class="body"><%= @product.body%></p>

	<% if user_signed_in? %>
		<h4>Status</h4>
		<div class="progress" style="display: block;">
			<% if @product[:status] >= 0 %>
				<% #Upload %>
				<div class="progress-bar progress-bar-primary" style="width: 12.5%;"></div>
			<% end %>
			<% if @product[:status] >= 1 %>
				<% #Review %>
				<div class="progress-bar progress-bar-primary" style="width: 12.5%;"></div>
			<% end %>
			<% if @product[:status] >= 2 %>
				<% #Optimize %>
				<div class="progress-bar progress-bar-primary" style="width: 12.5%;"></div>
			<% end %>
			<% if @product[:status] >= 3 %>
				<% #Approve %>
				<div class="progress-bar progress-bar-primary" style="width: 12.5%;"></div>
			<% end %>
			<% if @product[:status] >= 4 %>
				<% #Payment %>
				<div class="progress-bar progress-bar-primary" style="width: 12.5%;"></div>
			<% end %>
			<% if @product[:status] >= 5 %>
				<% #Printing %>
				<div class="progress-bar progress-bar-primary" style="width: 12.5%;"></div>
			<% end %>
			<% if @product[:status] >= 6 %>
				<% #Printed %>
				<div class="progress-bar progress-bar-primary" style="width: 12.5%;"></div>
			<% end %>
			<% if @product[:status] >= 7 %>
				<% #Shipped %>
				<div class="progress-bar progress-bar-primary" style="width: 12.5%;"></div>
			<% end %>
			<%= @product.status %>
		</div>
		<div class="btn-group">
			<% if !@product.price.nil? %>
				<%= link_to "Order", new_charge_path(:prod_id => @product.id), :class => "btn btn-success" %>
			<% end %>
			<div class="btn btn-primary" data-toggle="modal" data-target="#3Dview" >View 3D</div>
			<% if current_user.id == @product.user_id or current_user.admin? %>
				<%= link_to "Delete", product_path(@product), method: :delete, data: {confirm: "Are you sure?" }, :class => "btn btn-danger pull-right" %>
			<% end %>
		</div>
 <br>
		<% if current_user.admin? %>
		<div class="panel panel-danger" style="margin-top: 20px;">
			<div class="panel-heading">Admin panel</div>
			<div class="panel-body">
			<%= form_for @product do |f| %>
				<div class="input-group">
					<span class="input-group-addon">$</span>
					<%= f.text_field :price, :placeholder => "enter price here", :type => "text", :class => "form-control" %>
					<span class="input-group-btn"><button class="btn btn-default">Confirm price</button></span>
				</div>
			<% end %>
			</div>
		</div>
		<% end %>
	<% end %>
	<div class="modal fade" id="3Dview">
		<div id="modal_3D" class="modal-dialog modal-lg">
			<div class="modal-content" id="test">
				<div class="modal-header"><%= @product.title %>
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button></div>
				<div class="modal-body" id="canvas" style="display: block;padding: 0;"> </div>
				<div class="modal-footer"></div>
			</div>
		</div>
	</div>
</div>
<script type="text/javascript">

var stl_loaded = false;
function renderSTL() {
	var camera, scene, renderer,
	    geometry, material, mesh, light1, stats;
	var stl_bin = <%= @product.stl_binary %>

	function trim (str) {
		str = str.replace(/^\s+/, '');
		for (var i = str.length - 1; i >= 0; i--) {
			if (/\S/.test(str.charAt(i))) {
				str = str.substring(0, i + 1);
				break;
			}
		}
		return str;
	}

	var parseStlBinary = function(stl) {
		var geo = new THREE.Geometry();
		var dv = new DataView(stl, 80); // 80 == unused header
		var isLittleEndian = true;
		var triangles = dv.getUint32(0, isLittleEndian); 
		var offset = 4;
		for (var i = 0; i < triangles; i++) {
			var normal = new THREE.Vector3(
				dv.getFloat32(offset, isLittleEndian),
				dv.getFloat32(offset+4, isLittleEndian),
				dv.getFloat32(offset+8, isLittleEndian)
			); offset += 12;
			for (var j = 0; j < 3; j++) {
				geo.vertices.push(
					new THREE.Vector3(
						dv.getFloat32(offset, isLittleEndian),
						dv.getFloat32(offset+4, isLittleEndian),
						dv.getFloat32(offset+8, isLittleEndian)
					)
				);
				offset += 12 }
			offset += 2;
			geo.faces.push(new THREE.Face3(i*3, i*3+1, i*3+2, normal));
		}
		geo.computeFaceNormals();
		mesh = new THREE.Mesh( 
			geo,
			new THREE.MeshLambertMaterial({
				overdraw:true,
				color: 0x00B0F0,
				shading: THREE.FlatShading
			}
		));
		scene.add(mesh);
		stl = null;
	};

	var parseStl = function(stl) {
		var state = '';
		stl = stl + '';
		var lines = stl.split('\n');
		var geo = new THREE.Geometry();
		var name, parts, line, normal, done, vertices = [];
		var vCount = 0;
		stl = null;
		
		for (var len = lines.length, i = 0; i < len; i++) {
			if (done) {
				break;
			}
			line = trim(lines[i]);
			parts = line.split(' ');
			switch (state) {
				case '':
					if (parts[0] !== 'solid') {
						console.error(line);
						console.error('Invalid state "' + parts[0] + '", should be "solid"');
						return;
					} else {
						name = parts[1];
						state = 'solid';
					}
					break;
				case 'solid':
					if (parts[0] !== 'facet' || parts[1] !== 'normal') {
						console.error(line);
						console.error('Invalid state "' + parts[0] + '", should be "facet normal"');
						return;
					} else {
						normal = [
							parseFloat(parts[2]), 
							parseFloat(parts[3]), 
							parseFloat(parts[4])
						];
						state = 'facet normal';
					}
					break;
				case 'facet normal':
					if (parts[0] !== 'outer' || parts[1] !== 'loop') {
						console.error(line);
						console.error('Invalid state "' + parts[0] + '", should be "outer loop"');
						return;
					} else {
						state = 'vertex';
					}
					break;
				case 'vertex': 
					if (parts[0] === 'vertex') {
						geo.vertices.push(new THREE.Vector3(
							parseFloat(parts[1]),
							parseFloat(parts[2]),
							parseFloat(parts[3])
						));
					} else if (parts[0] === 'endloop') {
						geo.faces.push( new THREE.Face3( vCount*3, vCount*3+1, vCount*3+2, new THREE.Vector3(normal[0], normal[1], normal[2]) ) );
						vCount++;
						state = 'endloop';
					} else {
						console.error(line);
						console.error('Invalid state "' + parts[0] + '", should be "vertex" or "endloop"');
						return;
					}
					break;
				case 'endloop':
					if (parts[0] !== 'endfacet') {
						console.error(line);
						console.error('Invalid state "' + parts[0] + '", should be "endfacet"');
						return;
					} else {
						state = 'endfacet';
					}
					break;
				case 'endfacet':
					if (parts[0] === 'endsolid') {
						//mesh = new THREE.Mesh( geo, new THREE.MeshNormalMaterial({overdraw:true}));
						mesh = new THREE.Mesh( 
							geo, 
							new THREE.MeshLambertMaterial({
								overdraw:true,
								color: 0x00B0F0,
								shading: THREE.FlatShading
							}
						));
						scene.add(mesh);
						done = true;
					} else if (parts[0] === 'facet' && parts[1] === 'normal') {
						normal = [
							parseFloat(parts[2]), 
							parseFloat(parts[3]), 
							parseFloat(parts[4])
						];
						if (vCount % 1000 === 0) {
							//print one vertex in thousand
							console.log(normal);
						}
						state = 'facet normal';
					} else {
						console.error(line);
						console.error('Invalid state "' + parts[0] + '", should be "endsolid" or "facet normal"');
						return;
					}
					break;
				default:
					console.error('Invalid state "' + state + '"');
					break;
			}
		}
	};
	init();
	animate();

	function init() {
		scene = new THREE.Scene();
		camera = new THREE.PerspectiveCamera( 90, 1.5, 1, 10000 );
		camera.position.z = 70;
		//camera.position.y = 20;
		scene.add( camera );
		var directionalLight = new THREE.DirectionalLight( 0xffffff );
		directionalLight.position.x = 0; 
		directionalLight.position.y = 0; 
		directionalLight.position.z = 1; 
		directionalLight.position.normalize();
		scene.add( directionalLight );
		//TODO take xhr out so that it happens only once
		var xhr = new XMLHttpRequest();

		xhr.onreadystatechange = function () {
			if ( xhr.readyState == 4 ) {
				if ( xhr.status == 200 || xhr.status == 0 ) {
					var rep = xhr.response; // || xhr.mozResponseArrayBuffer;
					//console.log(rep);
					var int8view = rep.slice(0,80);
					//console.log(int8view);
					var test = ab2str(int8view);
					//console.log(test);
					//console.log(int8view.indexOf("solid"));
					if (stl_bin) {
						parseStlBinary(rep);
					}
					else {
						parseStl(rep);
					}
					//console.log(this.getResponseHeader('content-type'));
					mesh.rotation.x = 5;
					mesh.rotation.z = .25;
					var bbox = new THREE.BoundingBoxHelper( mesh );
					bbox.update();
					var point = new THREE.Vector3((bbox.box.max.x + bbox.box.min.x)/2, (bbox.box.max.y + bbox.box.min.y)/2, (bbox.box.max.z + bbox.box.min.z)/2 );
					camera.position.z = bbox.box.max.z * 2 ;
					camera.far = Math.max(bbox.box.max.x, bbox.box.max.y, bbox.box.max.z) * 2
					console.log('done parsing');
				}
			}
		}

		xhr.onerror = function(e) {
			console.log(e);
		}
		if(!stl_loaded) {
			xhr.open( "GET", '<%= @product.threeD_model.url %>', true );
			stl_loaded = true;
			xhr.send( null );
		}
		if (stl_bin) {
			xhr.responseType = "arraybuffer";
		} else {
			xhr.responseType = "text";
		}
		renderer = new THREE.WebGLRenderer({ alpha: true }); //new THREE.CanvasRenderer();
		if (typeof cv === 'undefined') {
		cv = document.getElementById("canvas")
		cv.appendChild(renderer.domElement );
		canvasSize = Math.max(cv.parentElement.clientWidth, cv.parentElement.clientHeight, 300);
		sampleRatio = 1;
		renderer.setSize(canvasSize * sampleRatio, canvasSize * sampleRatio * 0.6666);
		renderer.setClearColor(0xffffff, 1);
		console.log(canvasSize);
		}
	}

	function animate() {
		requestAnimationFrame( animate );
		render();
	}

	function render() {
		if (mesh) {
			mesh.rotation.z += 0.02;
		}
		renderer.render( scene, camera );
	}
}

function ab2str(buf) {
	  return String.fromCharCode.apply(null, new Uint8Array(buf));
}

$("#3Dview").on('shown.bs.modal', function () {
	renderSTL();
	})

</script>
